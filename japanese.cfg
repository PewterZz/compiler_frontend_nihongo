statements: statement+ 

statement: compound_stmt  | simple_stmts 

statement_newline:
    | compound_stmt NEWLINE 
    | simple_stmts
    | NEWLINE 
    | ENDMARKER 

simple_stmts:
    | simple_stmt !';' NEWLINE  # Not needed, there フォー speedup
    | ';'.simple_stmt+ [';'] NEWLINE 

# EXPRESSIONS
# -----------

expressions:
    | expression (',' expression )+ [','] 
    | expression ',' 
    | expression

expression:
    | disjunction 'イフ' disjunction 'else' expression 
    | disjunction
    | lambdef

yield_expr:
    | 'ヤールド' 'フロム' expression 
    | 'ヤールド' [star_expressions] 

star_expressions:
    | star_expression (',' star_expression )+ [','] 
    | star_expression ',' 
    | star_expression

star_expression:
    | '*' bitwise_or 
    | expression

star_named_expressions: ','.star_named_expression+ [','] 

star_named_expression:
    | '*' bitwise_or 
    | named_expression

assignment_expression:
    | NAME ':=' ~ expression 

named_expression:
    | assignment_expression
    | expression !':='

disjunction:
    | conjunction ('or' conjunction )+ 
    | conjunction

conjunction:
    | inversion ('and' inversion )+ 
    | inversion

inversion:
    | 'not' inversion 
    | comparison

# Comparison operators
# --------------------

comparison:
    | bitwise_or compare_op_bitwise_or_pair+ 
    | bitwise_or

compare_op_bitwise_or_pair:
    | eq_bitwise_or
    | noteq_bitwise_or
    | lte_bitwise_or
    | lt_bitwise_or
    | gte_bitwise_or
    | gt_bitwise_or
    | notin_bitwise_or
    | in_bitwise_or
    | isnot_bitwise_or
    | is_bitwise_or

eq_bitwise_or: '==' bitwise_or 
noteq_bitwise_or:
    | ('!=' ) bitwise_or 
lte_bitwise_or: '<=' bitwise_or 
lt_bitwise_or: '<' bitwise_or 
gte_bitwise_or: '>=' bitwise_or 
gt_bitwise_or: '>' bitwise_or 
notin_bitwise_or: 'not' 'in' bitwise_or 
in_bitwise_or: 'in' bitwise_or 
isnot_bitwise_or: 'is' 'not' bitwise_or 
is_bitwise_or: 'is' bitwise_or 

# NOTE: assignment MUST precede expression, else parsing a simple assignment
# will throw a SyntaxError.
simple_stmt:
    | assignment
    | type_alias
    | star_expressions 
    | return_stmt
    | import_stmt
    | raise_stmt
    #pass
    | 'パス' 
    | del_stmt
    | yield_stmt
    | assert_stmt
    #break
    #continue
    | 'ブレーク' 
    | 'コンティニュー' 
    | global_stmt
    | nonlocal_stmt

compound_stmt:
    | function_def
    | if_stmt
    | class_def
    | with_stmt
    | for_stmt
    | try_stmt
    | while_stmt
    | match_stmt

# SIMPLE STATEMENTS
# =================

# NOTE: annotated_rhs may start with 'yield'; yield_expr must start with 'yield'
assignment:
    | NAME ':' expression ['=' annotated_rhs ] 
    | ('(' single_target ')' 
         | single_subscript_attribute_target) ':' expression ['=' annotated_rhs ] 
    | (star_targets '=' )+ (yield_expr | star_expressions) !'=' [TYPE_COMMENT] 
    | single_target augassign ~ (yield_expr | star_expressions) 

annotated_rhs: yield_expr | star_expressions

augassign:
    | '+=' 
    | '-=' 
    | '*=' 
    | '@=' 
    | '/=' 
    | '%=' 
    | '&=' 
    | '|=' 
    | '^=' 
    | '<<=' 
    | '>>=' 
    | '**=' 
    | '//=' 

return_stmt:
    | 'リターン' [star_expressions] 

#raise from

raise_stmt:
    | 'レイズ' expression ['フロム' expression ] 
    | 'レイズ' 

global_stmt: 'グローバル' ','.NAME+ 

nonlocal_stmt: 'ノンローカル' ','.NAME+ 

del_stmt:
    | 'デル' del_targets &(';' | NEWLINE) 

yield_stmt: yield_expr 

assert_stmt: 'アサート' expression [',' expression ] 

import_stmt:
    | import_name
    | import_from

import_name: 'インポート' dotted_as_names 
# note below: the ('.' | '...') is necessary because '...' is tokenized as ELLIPSIS
import_from:
    | 'フロム' ('.' | '...')* dotted_name 'インポート' import_from_targets 
    | 'フロム' ('.' | '...')+ 'インポート' import_from_targets 
import_from_targets:
    | '(' import_from_as_names [','] ')' 
    | import_from_as_names !','
    | '*' 
import_from_as_names:
    | ','.import_from_as_name+ 
import_from_as_name:
    | NAME ['アズ' NAME ] 
dotted_as_names:
    | ','.dotted_as_name+ 
dotted_as_name:
    | dotted_name ['アズ' NAME ] 
dotted_name:
    | dotted_name '.' NAME 
    | NAME

# COMPOUND STATEMENTS
# ===================

# Common elements
# ---------------

block:
    | NEWLINE INDENT statements DEDENT 
    | simple_stmts

decorators: ('@' named_expression NEWLINE )+ 

# Class definitions
# -----------------

class_def:
    | decorators class_def_raw 
    | class_def_raw

class_def_raw:
    | 'クラス' NAME [type_params] ['(' [arguments] ')' ] ':' block 

# Function definitions
# --------------------

function_def:
    | decorators function_def_raw 
    | function_def_raw

function_def_raw:
    | 'デフ' NAME [type_params] '(' [params] ')' ['->' expression ] ':' [func_type_comment] block 
    | アシンク 'デフ' NAME [type_params] '(' [params] ')' ['->' expression ] ':' [func_type_comment] block 

# Function parameters
# -------------------

params:
    | parameters

parameters:
    | slash_no_default param_no_default* param_with_default* [star_etc] 
    | slash_with_default param_with_default* [star_etc] 
    | param_no_default+ param_with_default* [star_etc] 
    | param_with_default+ [star_etc] 
    | star_etc 

# イフ statement
# ------------

if_stmt:
    | 'イフ' named_expression ':' block elif_stmt 
    | 'イフ' named_expression ':' block [else_block] 
elif_stmt:
    | 'エルイフ' named_expression ':' block elif_stmt 
    | 'エルイフ' named_expression ':' block [else_block] 
else_block:
    | 'エルス' ':' block 

# ホワイル statement
# ---------------

while_stmt:
    | 'ホワイル' named_expression ':' block [else_block] 

# フォー statement
# -------------

#アシンク -> async
for_stmt:
    | 'フォー' star_targets 'in' ~ star_expressions ':' [TYPE_COMMENT] block [else_block] 
    | アシンク 'フォー' star_targets 'in' ~ star_expressions ':' [TYPE_COMMENT] block [else_block] 

# トライ statement
# -------------

try_stmt:
    | 'トライ' ':' block finally_block 
    | 'トライ' ':' block except_block+ [else_block] [finally_block] 
    | 'トライ' ':' block except_star_block+ [else_block] [finally_block] 


# エクセプト statement
# ----------------

except_block:
    | 'エクセプト' expression ['アズ' NAME ] ':' block 
    | 'エクセプト' ':' block 
except_star_block:
    | 'エクセプト' '*' expression ['アズ' NAME ] ':' block 
finally_block:
    | 'ファイナリー' ':' block 

# Literal patterns are used フォー equality and identity constraints
literal_pattern:
    | signed_number !('+' | '-') 
    | complex_number 
    | strings 
    | 'ナン' 
    | 'トゥルー' 
    | 'フォルス' 

# Literal expressions are used to restrict permitted mapping pattern keys
literal_expr:
    | signed_number !('+' | '-')
    | complex_number
    | strings
    | 'ナン' 
    | 'トゥルー' 
    | 'フォルス' 

complex_number:
    | signed_real_number '+' imaginary_number 
    | signed_real_number '-' imaginary_number  

signed_number:
    | NUMBER
    | '-' NUMBER 

signed_real_number:
    | real_number
    | '-' real_number 

real_number:
    | NUMBER 

imaginary_number:
    | NUMBER

sum:
    | sum '+' term 
    | sum '-' term 
    | term

term:
    | term '*' factor 
    | term '/' factor 
    | term '//' factor 
    | term '%' factor 
    | term '@' factor 
    | factor

factor:
    | '+' factor 
    | '-' factor 
    | '~' factor 
    | power

power:
    | await_primary '**' factor 
    | await_primary

await_primary:
    | アウェイト primary 
    | primary

string: STRING 
strings: (fstring|string)+ 

list:
    | '[' [star_named_expressions] ']' 

tuple:
    | '(' [star_named_expression ',' [star_named_expressions]  ] ')' 

set: '{' star_named_expressions '}' 
 